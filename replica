/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: iariss <iariss@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/05/24 15:57:16 by iariss            #+#    #+#             */
/*   Updated: 2021/06/05 17:17:27 by iariss           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <stdlib.h>
#include "file.h"

t_list	*find_before_last(t_list **head, t_list *last)
{
	t_list	*replica;

	replica = *head;
	while (replica->next != last)
	{
		replica = replica->next;
	}
	return (replica);
}

void	check_for_doubles(char **all, t_list **a, t_stack *stack)
{
	int	j;
	int	i;

	i = 0;
	j = 0;
	stack->number_of_inst = 0;
	while (all[i])
	{
		j = 0;
		j = i + 1;
		while (all[j])
		{
			if (ft_atoi(all[i]) == ft_atoi(all[j]))
			{
				error("Error\nDouble number");
				free_and_ex(a)                                ;
			}
			j++;
		}
		i++;
	}
}

void	find_big_and_small(char **all, t_srav *vars, t_stack *stack, int *big)
{
	while (all[vars->h])
	{
		if (ft_atoi(all[vars->h]) > ft_atoi(vars->biggest))
		{
			vars->biggest = all[vars->h];
		}
		vars->h++;
	}
	*big = ft_atoi(vars->biggest);
	vars->fixed[0] = vars->biggest;
	vars->kk = vars->h;
	vars->h = 0;
	while (vars->h < vars->kk && all[vars->h])
	{
        if (all[0] && all[vars->h])
        {          
            if (ft_atoi(all[vars->h]) < ft_atoi(vars->smallest))
            {
                vars->smallest = all[vars->h];
                stack->indicate = vars->h;
            }
        }
		vars->h++;
	}
}

char	**put_in_place(char **all, int size, t_vars *varso, t_stack *stack)
{
	t_srav	vars;

	initialize_vars2(&vars, all, stack);
	find_big_and_small(all, &vars, stack, &varso->biggest);
	varso->smallest = ft_atoi(vars.smallest);
	while (vars.j < size)
	{
		vars.i = 0;
		while (vars.i < size)
		{
            if (all[vars.i] && vars.fixed[vars.j] && all[vars.i][0] != 'a')
            {             
                if (ft_atoi(all[vars.i]) < ft_atoi(vars.fixed[vars.j]))
                {
                    vars.fixed[vars.j] = all[vars.i];
                    vars.cursed = vars.i;
                }
            }
			vars.i++;
		}
		all[vars.cursed] = "ameno";
		vars.j++;
		vars.fixed[vars.j] = vars.biggest;
	}
	vars.fixed[vars.j] = NULL;
	return (vars.fixed);
}

int	meth(char **all, t_stack *stack)
{
	int	i;

	i = stack->topa / 3;
	i = ft_atoi(all[i]);
	return (i);
}

void	find_mid(t_list **a, t_stack *stack, t_vars *vars, int *mid)
{
	t_list	*replica;
	char	**all;
	char	**tmp;
	int		i;

	i = 0;
	replica = *a;
	all = (char **)malloc(sizeof(char *) * (stack->topa + 1));
	while (replica)
	{
		all[i] = replica->content;
		replica = replica->next;
		i++;
	}
	all[i] = NULL;
	stack->back1 = all;
	check_for_doubles(all, a, stack);
	tmp = put_in_place(all, stack->topa, vars, stack);
	*mid = meth(tmp, stack);
	stack->back2 = tmp;
}

int	check_order(t_list **list, t_stack *stack, int top)
{
	char	**all;
	int		i;

	stack->replica = *list;
	i = 0;
	all = (char **)malloc(sizeof(char *) * (top + 1));
	while (stack->replica)
	{
		all[i] = stack->replica->content;
		stack->replica = stack->replica->next;
		i++;
	}
	all[i] = NULL;
	i = 0;
	while (all[i] && i < stack->sizea)
	{
		if (all[i + 1] && ft_atoi(all[i]) < ft_atoi(all[i + 1]))
		{
			free(all);
			return (0);
		}
		i++;
	}
	free(all);
	return (1);
}

char	**find_biggest(t_list **list, t_stack *stack, int *b, char **tab)
{
	t_list	*replica;
	int		i;
	char	*biggest;

	replica = *list;
	i = 0;
	while (replica)
	{
		tab[i] = replica->content;
		replica = replica->next;
		i++;
	}
	tab[i] = NULL;
	biggest = tab[0];
	i = 0;
	while (tab[i])
	{
		if (ft_atoi(tab[i]) > ft_atoi(biggest))
		{
			biggest = tab[i];
			stack->indicate = i;
		}
		i++;
	}
	*b = ft_atoi(biggest);
	return (tab);
}

void	switch_by_mid(t_vars *vars, t_stack *stack, t_list **a, t_list **b)
{
	while (vars->k > 0)
	{
		vars->top = stack->topa;
		vars->bcl = vars->top / 3;
		find_mid(a, stack, vars, &vars->mid);
		vars->save = stack->back1;
		while (vars->bcl)
		{
			vars->num = ft_atoi((*a)->content);
			if (vars->num < vars->mid)
			{
				push_b(a, b, stack);
				vars->bcl--;
			}
			else
			{
				rotate_a(a, stack);
			}
		}
		free(stack->back1);
		free(stack->back2);
		vars->k--; 
	}
}

void	switch_the_rest_sorted(t_vars *vars, t_stack *stack, t_list **a, t_list **b)
{
	vars->s = 0;
	while (stack->topa > 0)
	{
		find_mid(a, stack, vars, &vars->mid);
		if (stack->indicate <= stack->topa / 2)
		{
			while (ft_atoi((*a)->content) > vars->smallest)
				rotate_a(a, stack);
		}
		else if (stack->indicate > stack->topa / 2)
		{
			while (ft_atoi((*a)->content) > vars->smallest)
				reverse_rotate_a(a, stack);
		}
		push_b(a, b, stack);
		free(stack->back1);
		free(stack->back2);
	}
}

void	switch_back_to_a(t_vars *vars, t_stack *stack, t_list **a, t_list **b, char **tab)
{
	while (stack->topb >= 0)
	{
		tab = find_biggest(b, stack, &vars->biggest, tab);
		if (stack->indicate <= stack->topb / 2)
		{
			while (ft_atoi((*b)->content) < vars->biggest)
				rotate_b(b, stack);
		}
		else if (stack->indicate > stack->topb / 2)
		{
			while (ft_atoi((*b)->content) < vars->biggest)
				reverse_rotate_b(b, stack);
		}
		push_a(a, b, stack);
	}
}

char	**operate(t_list **a, t_list **b, t_stack *stack, char **tab)
{
	t_vars	vars;

	initialise_vars(stack, &vars);
	switch_by_mid(&vars, stack, a, b);
	switch_the_rest_sorted(&vars, stack, a, b);
	switch_back_to_a(&vars, stack, a, b, tab);
	return (tab);
}

void	check_arg(char *s, t_list **head)
{
	int	i;

	i = 0;
	while (s[i])
	{
		if ((s[i] >= '0' && s[i] <= '9') || s[i] == '-')
			i++;
		else
		{
			error("Error\nBad character in arguments");
			free_and_ex(head);
		}
	}
	if (ft_atoi(s) == -1 && ft_strlen(s) > 9)
	{
		error("Error\nOut of int range");
		free_and_ex(head);
	}
}

int	main(int c, char **v)
{
	int		i;
	int		k;
	t_stack	stack;
	t_list	*yo = NULL;
	t_list	*a = NULL;
	t_list	*b = NULL;
	char	**tab;

	i = c;
	k = 1;
	initialize_vars(&stack, c);
	if (c > 1)
	{
		a = initialize_a(c, a, yo, v, &stack);
		if (check_order(&a, &stack, stack.topa))
		{
			free_list(&a);
			exit(0);
		}
		tab = (char **)malloc(sizeof(char *) * (stack.topa + 1));
		tab = operate(&a, &b, &stack, tab);
		free_list(&a);
		free(tab);
		return (0);
	}
	error("u forgot the argumments :)");
	return (1);
}
